name: "Build Distribution"

on:
  push:
    tags: ['*']

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from gradle.properties
        id: get-version
        run: |
          VERSION=$(grep "version=" gradle.properties | sed -n -e 's/^.*version=//p')
          if [ -z "$VERSION" ]; then
            echo "Version number not found!"
            exit 1
          fi
          echo "Version is $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

  distribute_service:
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
    name: Distribute Service Container
    runs-on: ubuntu-22.04
    permissions: write-all

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: burrunan/gradle-cache-action@v1
        name: Cache Gradle
        with:
          job-id: jdk18

      - name: Install and cache system packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ffmpeg gpac
          version: 1.0

      - name: Setup JDK 18
        uses: actions/setup-java@v1
        with:
          java-version: 18
          java-package: jdk

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle8-java18-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle8-java18-

      - name: Build & Run Tests
        run: "./gradlew --info --no-daemon build test"
        continue-on-error: false

      - name: Nothing left TODO
        run: .github/nothing_left_todo.sh

      - name: (GCP) Authenticate and setup Google Cloud SDK
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: (GCP) Build & push Docker images
        run: |
          ./gradlew --info --no-daemon \
            -PjibFromImage=gcr.io/xj-vpc-host-prod/base:latest \
            -PjibToImageRegistry=gcr.io/xj-vpc-host-prod \
            -PjibToTags=${{  github.ref_name }} \
            :service:jib
        continue-on-error: false

  distribute_gui_shadow_jar:
    needs: version
    name: Distribute GUI shadow distribution
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
      GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions: write-all
    runs-on: ubuntu-latest
    steps:

      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 18

      - name: Echo JAVA_HOME
        run: echo $JAVA_HOME

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Execute build of GUI shadow zip
        run: ./gradlew --info --stacktrace :gui:shadowDistZip

      - name: Extract the contents of the shadow zip
        run: unzip -o gui/build/distributions/gui-shadow-${{ needs.version.outputs.version }}.zip -d gui/build/distributions/

      - name: Upload GUI Shadow distribution as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: xjmusic-workstation-shadow-dist
          path: gui/build/distributions/gui-shadow-${{ needs.version.outputs.version }}/

  distribute_gui:
    name: Distribute ${{ matrix.os }} JDK ${{ matrix.java }}
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        java: [ '18' ]
      fail-fast: false
    steps:

      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Echo JAVA_HOME
        run: echo $JAVA_HOME

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Execute build
        run: ./gradlew --info --stacktrace :gui:build

      - name: Execute jlink
        run: ./gradlew --info --stacktrace :gui:jlink

      - name: Execute jpackage
        run: ./gradlew --info --stacktrace :gui:jpackage

      - name: Upload DMG as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: xjmusic-workstation-${{ matrix.os }}-jdk${{ matrix.java }}-dmg
          path: gui/build/jpackage/*.dmg

      - name: Upload EXE as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: xjmusic-workstation-${{ matrix.os }}-jdk${{ matrix.java }}-exe
          path: gui/build/jpackage/*.exe

      - name: Upload MSI as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: xjmusic-workstation-${{ matrix.os }}-jdk${{ matrix.java }}-msi
          path: gui/build/jpackage/*.msi

      - name: Upload DEB as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: xjmusic-workstation-${{ matrix.os }}-jdk${{ matrix.java }}-deb
          path: gui/build/jpackage/*.deb

      - name: Upload RPM as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: xjmusic-workstation-${{ matrix.os }}-jdk${{ matrix.java }}-rpm
          path: gui/build/jpackage/*.rpm

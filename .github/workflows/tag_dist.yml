name: "Distribution"

on:
  push:
    tags: [ '*' ]

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: burrunan/gradle-cache-action@v1
        name: Cache Gradle
        with:
          job-id: jdk17

      - name: Setup JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          java-package: jdk

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle8-java17-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle8-java17-

      - name: Nothing left TODO
        run: .github/nothing_left_todo.sh

      - name: Get version from gradle.properties
        id: get-version
        run: |
          VERSION=$(grep "version=" gradle.properties | sed -n -e 's/^.*version=//p')
          if [ -z "$VERSION" ]; then
            echo "Version number not found!"
            exit 1
          fi
          echo "Version is $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Version number must match tag name
        run: |
          TAG_NAME=${{ github.ref_name }}
          VERSION=${{ steps.get-version.outputs.version }}
          if [ "$TAG_NAME" != "v$VERSION" ]; then
            echo "gradle.properties version number '$VERSION' implies tag name 'v$VERSION' but instead found '$TAG_NAME'!"
            exit 1
          fi

      - name: Build & Run Tests
        run: "./gradlew --info --no-daemon build test"
        continue-on-error: false

  distribute_service:
    needs: verify
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
    name: Service Container
    runs-on: ubuntu-22.04
    permissions: write-all

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: burrunan/gradle-cache-action@v1
        name: Cache Gradle
        with:
          job-id: jdk17

      - name: Setup JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          java-package: jdk

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle8-java17-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle8-java17-

      - name: (GCP) Authenticate and setup Google Cloud SDK
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: (GCP) Build & push Docker images
        run: |
          ./gradlew --info --no-daemon \
            -PjibFromImage=gcr.io/xj-vpc-host-prod/base:latest \
            -PjibToImageRegistry=gcr.io/xj-vpc-host-prod \
            -PjibToTags=v${{ needs.verify.outputs.version }} \
            :service:jib
        continue-on-error: false

  distribute_gui_jar:
    needs: verify
    name: GUI JAR [${{ matrix.os }}-JDK${{ matrix.java }}]
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        java: [ '17' ]
      fail-fast: false
    steps:

      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Echo JAVA_HOME
        run: echo $JAVA_HOME

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Execute spring boot distribution .jar
        run: ./gradlew --info --stacktrace :gui:bootJarZip

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: gui/build/dist/xjmusic-workstation-gui-${{ needs.verify.outputs.version }}.zip
          asset_name: xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}.jar.zip
          tag: ${{ github.ref }}
          overwrite: true

  distribute_gui_installer:
    needs: verify
    name: GUI Installer [${{ matrix.os }}-JDK${{ matrix.java }}]
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        java: [ '17' ]
      fail-fast: false
    steps:

      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Echo JAVA_HOME
        run: echo $JAVA_HOME

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Execute build
        run: ./gradlew --info --stacktrace :gui:build

      - name: Execute jpackage
        run: ./gradlew --info --stacktrace :gui:jpackage

      - name: Compress DMG for macOS
        if: runner.os == 'macOS'
        run: |
          cd gui/build/jpackage/
          zip -r ../../../xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.dmg.zip xjmusic-workstation-v${{ needs.verify.outputs.version }}-installer.dmg

      - name: Upload DMG to release (macOS)
        if: runner.os == 'macOS'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.dmg.zip
          asset_name: xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.dmg.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Compress EXE for Windows
        if: runner.os == 'Windows'
        run: |
          cd gui/build/jpackage/
          Compress-Archive -Path xjmusic-workstation-v${{ needs.verify.outputs.version }}-installer.exe -DestinationPath ../../../xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.exe.zip

      - name: Upload EXE to release (Windows)
        if: runner.os == 'Windows'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.exe.zip
          asset_name: xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.exe.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Compress DEB for Linux
        if: runner.os == 'Linux'
        run: |
          cd gui/build/jpackage/
          tar -czvf ../../../xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.deb.tar.gz xjmusic-workstation-v${{ needs.verify.outputs.version }}-installer.deb

      - name: Upload DEB to release (Linux)
        if: runner.os == 'Linux'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.deb.tar.gz
          asset_name: xjmusic-workstation-v${{ needs.verify.outputs.version }}-${{ matrix.os }}-jdk${{ matrix.java }}-installer.deb.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

// Copyright (c) XJ Music Inc. (https://xjmusic.com) All Rights Reserved.

plugins {
  id 'java'
  id 'application'
  //
  id 'org.beryx.jlink'
  id 'org.openjfx.javafxplugin'
  id 'org.springframework.boot'
}

ext {
  junitVersion = '5.9.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

mainClassName = 'io.xj.gui.WorkstationApplication'

javafx {
  version = "${rootProject.ext.javaFxVersion}"
  modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

ext.os = org.gradle.internal.os.OperatingSystem.current()
jlink {
  imageZip = file("$buildDir/image-zip/xjmusic-workstation.zip")
  options = ['--bind-services', '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

  launcher {
    name = 'xjmusic-workstation'
    noConsole = true
  }
  jpackage {
    if(os.windows) {
      installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu']
    }
  }
}

dependencies {
  implementation project(":lib")
  implementation project(":service")
  testImplementation(project(':lib').sourceSets.test.output)
  testImplementation(testFixtures(project(":service")))
  // vendor
  implementation "org.springframework.boot:spring-boot-starter-web:${rootProject.ext.springBootVersion}"
  implementation 'org.jetbrains:annotations:24.0.1'
  implementation "org.openjfx:javafx-base:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-controls:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-fxml:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-graphics:${rootProject.ext.javaFxVersion}"
  implementation 'org.slf4j:log4j-over-slf4j:2.0.5'
  implementation "org.jooq:jooq:${rootProject.ext.jooqVersion}"
  implementation 'org.slf4j:slf4j-api:2.0.5'
  testImplementation "org.springframework.boot:spring-boot-starter-test:${rootProject.ext.springBootVersion}"
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
  useJUnitPlatform()
}

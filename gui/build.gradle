// Copyright (c) XJ Music Inc. (https://xjmusic.com) All Rights Reserved.

plugins {
  id 'java'
  id 'application'
  id 'maven-publish'
  //
  id 'org.beryx.jlink'
  id 'org.openjfx.javafxplugin'
  id 'org.springframework.boot'
  id 'org.bytedeco.gradle-javacpp-platform'
}

javafx {
  version = "${rootProject.ext.javaFxVersion}"
  modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

//noinspection GroovyAssignabilityCheck
ext.os = org.gradle.internal.os.OperatingSystem.current() as org.gradle.internal.os.OperatingSystem

jlink {
  // imageZip = file("$buildDir/image-zip/xjmusic-workstation.zip")
  // options = ['--bind-services', '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  addExtraDependencies 'javafx'
  addExtraDependencies 'jooq'
  addExtraDependencies 'jackson'

  launcher {
    name = 'xjmusic-workstation'
    noConsole = true
  }
}

dependencies {
  // peers
  implementation project(":lib")
  implementation project(":nexus")
  // private
  implementation "io.xj:models:${rootProject.ext.xjModelsVersion}"
  // vendor
  implementation "ch.qos.logback:logback-classic:${rootProject.ext.logbackVersion}"
  implementation "ch.qos.logback:logback-core:${rootProject.ext.logbackVersion}"
  implementation "org.jooq:jooq:${rootProject.ext.jooqVersion}"
  implementation "org.openjfx:javafx-base:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-controls:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-fxml:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-graphics:${rootProject.ext.javaFxVersion}"
  implementation "org.springframework.boot:spring-boot-starter-logging:${rootProject.ext.springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter:${rootProject.ext.springBootVersion}"
  implementation 'com.typesafe:config:1.4.2'
  implementation 'commons-codec:commons-codec:1.15'
  implementation 'commons-io:commons-io:2.11.0'
  implementation 'io.projectreactor.tools:blockhound:1.0.6.RELEASE'
  implementation 'me.xdrop:fuzzywuzzy:1.4.0'
  implementation 'org.apache.httpcomponents:httpclient:4.5.14'
  implementation 'org.reflections:reflections:0.10.1'
  testImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.junitVersion}"
}

mainClassName = 'io.xj.gui.WorkstationGuiApplication'

//noinspection ConfigurationAvoidance
task 'bootJarZip'(type: Zip) {
  dependsOn('bootJar')
  from "build/libs/"
  archiveBaseName = 'xjmusic-workstation-gui'
  include "xjmusic-workstation-gui-${rootProject.version}.jar"
  destinationDirectory = file("$buildDir/dist")
}

bootJar {
  launchScript()
  archiveBaseName = 'xjmusic-workstation-gui'
}

test {
  useJUnitPlatform()
}

//declare the variables to be used
def bundlePath = file('./installer/')
def outputDir = file('../bundle/')
def bundleScript = file('bin/build-package.sh')
def packageType = "exe"
def appIcon = 'xjmusic.ico'
def mainJar = 'xjmusic-workstation-gui-0.5.48.jar'
def publishedVersion = project.version
def osName = System.getProperty('os.name').toLowerCase()
def extraBundlerArguments = []

//task that copy jar generated jar file from build path
task copyJar(type:Copy,dependsOn: build){
  println '\n Started Copying resources'
  if (bundlePath.exists() && bundlePath.isDirectory()) {
    bundlePath.deleteDir()
    println "Previous Resource Bundle path folder deleted."
  }

  //delete the previous exe generated bundle
  if (outputDir.exists() && outputDir.isDirectory()) {
      outputDir.deleteDir()
      println "Previous Generated app Bundle deleted ."
  }

  duplicatesStrategy = DuplicatesStrategy.EXCLUDE

  from("build/libs"){
    include '*.jar'
    exclude '*plain.jar'
  }

  from("icons/windows/xjmusic.ico"){
    include '*.ico'
    exclude '*.bat' , '.gradle' , '.gitignore' , '*gradlew*'
  }

  into 'installer'

  println '\nFinished Copying resources'
}

task beforeCreate(dependsOn: copyJar){
  println '\nStarted platform-specific Icon assigning'

  if (osName.contains("mac")) {
    packageType = 'dmg'
    appIcon = file('../icons/mac/xjmusic.icns')
    if (!project.hasProperty("unsigned")) {
      extraBundlerArguments = ['--mac-sign']
    }
  } else if (osName.contains('nix') || osName.contains('nux') || osName.contains('unix')) {
    packageType = 'deb'
    appIcon = file('../icons/linux/xjmusic.png')

  } else if (osName.contains("win")) {
    packageType = 'exe'
    appIcon = '../icons/windows/xjmusic.ico'
    bundleScript = file('bin/build-package.bat')
  }

  println '\nFinished Icon assigning'
}

task createBundle(type: Exec,dependsOn:beforeCreate) {
  println('\nStarting Windows bundle creation')

  if (osName.contains("win")) {
    inputs.dir('bin')
    inputs.dir('icons')
    inputs.dir('installer')
    workingDir 'installer'
    commandLine 'cmd', '/c',
      bundleScript,
      packageType,
      bundlePath,
      outputDir,
      mainJar,
      publishedVersion,
      appIcon
  } else {
    commandLine = ['sh',
                   bundleScript,
                   packageType,
                   bundlePath,
                   mainJar,
                   publishedVersion,
                   appIcon,
                   *extraBundlerArguments
    ]
  }
}



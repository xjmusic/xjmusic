/*
 * This file is generated by jOOQ.
 */
package io.xj.hub.tables.pojos;


import io.xj.hub.enums.InstrumentMode;
import io.xj.hub.enums.InstrumentState;
import io.xj.hub.enums.InstrumentType;
import io.xj.hub.tables.interfaces.IInstrument;

import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Instrument implements IInstrument {

    private static final long serialVersionUID = 1L;

    private UUID            id;
    private UUID            libraryId;
    private InstrumentType  type;
    private InstrumentState state;
    private String          name;
    private Float           density;
    private String          config;
    private Boolean         isDeleted;
    private Float           volume;
    private InstrumentMode  mode;

    public Instrument() {}

    public Instrument(IInstrument value) {
        this.id = value.getId();
        this.libraryId = value.getLibraryId();
        this.type = value.getType();
        this.state = value.getState();
        this.name = value.getName();
        this.density = value.getDensity();
        this.config = value.getConfig();
        this.isDeleted = value.getIsDeleted();
        this.volume = value.getVolume();
        this.mode = value.getMode();
    }

    public Instrument(
        UUID            id,
        UUID            libraryId,
        InstrumentType  type,
        InstrumentState state,
        String          name,
        Float           density,
        String          config,
        Boolean         isDeleted,
        Float           volume,
        InstrumentMode  mode
    ) {
        this.id = id;
        this.libraryId = libraryId;
        this.type = type;
        this.state = state;
        this.name = name;
        this.density = density;
        this.config = config;
        this.isDeleted = isDeleted;
        this.volume = volume;
        this.mode = mode;
    }

    /**
     * Getter for <code>xj.instrument.id</code>.
     */
    @Override
    public UUID getId() {
        return this.id;
    }

    /**
     * Setter for <code>xj.instrument.id</code>.
     */
    @Override
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Getter for <code>xj.instrument.library_id</code>.
     */
    @Override
    public UUID getLibraryId() {
        return this.libraryId;
    }

    /**
     * Setter for <code>xj.instrument.library_id</code>.
     */
    @Override
    public void setLibraryId(UUID libraryId) {
        this.libraryId = libraryId;
    }

    /**
     * Getter for <code>xj.instrument.type</code>.
     */
    @Override
    public InstrumentType getType() {
        return this.type;
    }

    /**
     * Setter for <code>xj.instrument.type</code>.
     */
    @Override
    public void setType(InstrumentType type) {
        this.type = type;
    }

    /**
     * Getter for <code>xj.instrument.state</code>.
     */
    @Override
    public InstrumentState getState() {
        return this.state;
    }

    /**
     * Setter for <code>xj.instrument.state</code>.
     */
    @Override
    public void setState(InstrumentState state) {
        this.state = state;
    }

    /**
     * Getter for <code>xj.instrument.name</code>.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>xj.instrument.name</code>.
     */
    @Override
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for <code>xj.instrument.density</code>.
     */
    @Override
    public Float getDensity() {
        return this.density;
    }

    /**
     * Setter for <code>xj.instrument.density</code>.
     */
    @Override
    public void setDensity(Float density) {
        this.density = density;
    }

    /**
     * Getter for <code>xj.instrument.config</code>.
     */
    @Override
    public String getConfig() {
        return this.config;
    }

    /**
     * Setter for <code>xj.instrument.config</code>.
     */
    @Override
    public void setConfig(String config) {
        this.config = config;
    }

    /**
     * Getter for <code>xj.instrument.is_deleted</code>.
     */
    @Override
    public Boolean getIsDeleted() {
        return this.isDeleted;
    }

    /**
     * Setter for <code>xj.instrument.is_deleted</code>.
     */
    @Override
    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    /**
     * Getter for <code>xj.instrument.volume</code>.
     */
    @Override
    public Float getVolume() {
        return this.volume;
    }

    /**
     * Setter for <code>xj.instrument.volume</code>.
     */
    @Override
    public void setVolume(Float volume) {
        this.volume = volume;
    }

    /**
     * Getter for <code>xj.instrument.mode</code>.
     */
    @Override
    public InstrumentMode getMode() {
        return this.mode;
    }

    /**
     * Setter for <code>xj.instrument.mode</code>.
     */
    @Override
    public void setMode(InstrumentMode mode) {
        this.mode = mode;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Instrument (");

        sb.append(id);
        sb.append(", ").append(libraryId);
        sb.append(", ").append(type);
        sb.append(", ").append(state);
        sb.append(", ").append(name);
        sb.append(", ").append(density);
        sb.append(", ").append(config);
        sb.append(", ").append(isDeleted);
        sb.append(", ").append(volume);
        sb.append(", ").append(mode);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IInstrument from) {
        setId(from.getId());
        setLibraryId(from.getLibraryId());
        setType(from.getType());
        setState(from.getState());
        setName(from.getName());
        setDensity(from.getDensity());
        setConfig(from.getConfig());
        setIsDeleted(from.getIsDeleted());
        setVolume(from.getVolume());
        setMode(from.getMode());
    }

    @Override
    public <E extends IInstrument> E into(E into) {
        into.from(this);
        return into;
    }
}

// Copyright (c) XJ Music Inc. (https://xjmusic.com) All Rights Reserved.

plugins {
  id 'java'
  id 'application'
  id 'distribution'
  id 'com.google.cloud.tools.jib' version '3.3.2' apply false
  id 'io.spring.dependency-management' version '1.0.15.RELEASE' apply false
  id 'org.openjfx.javafxplugin' version '0.0.14' apply false
  id 'org.panteleyev.jpackageplugin' version '1.5.2' apply false
  id 'org.bytedeco.gradle-javacpp-platform' version '1.5.9' apply false
  id 'org.springframework.boot' version '3.1.2' apply false // must match springBootVersion below
}

ext {
  jacksonAnnotationsVersion = '2.15.2'
  javaFxVersion = '20.0.2'
  jooqVersion = '3.18.5'
  junitVersion = '5.9.2'
  jupiterMockitoVersion = '5.5.0'
  jupiterVersion = '5.8.1'
  logbackVersion = '1.4.11'
  springBootVersion = '3.1.2'
  springTestVersion = '6.0.11'
  // private
  xjModelsVersion = '1.7.36'
}

// Load the local properties if present
Properties localProperties = new Properties()
def localPropertiesFile = project.rootProject.file('gradle-local.properties')
if (localPropertiesFile.exists()) {
  localProperties.load(localPropertiesFile.newDataInputStream())
}

// Determine the private packages username and password
def privatePackagesUsername = localPropertiesFile.exists() ? localProperties.getProperty('repo.username') : System.getenv("REPO_USERNAME")
def privatePackagesPassword = localPropertiesFile.exists() ? localProperties.getProperty('repo.token') : System.getenv("REPO_TOKEN")

// Log the username and (masked) password
println "+--------------------------------------------+"
println "|   GitHub Private Packages Authentication   |"
println "+--------------------------------------------+"
println localPropertiesFile.exists() ? "Using gradle-local.properties" : "Using environment variables"
println "Username: $privatePackagesUsername"
def maskedPassword = privatePackagesPassword ? privatePackagesPassword.replaceAll(/./, '*') : null
println "Password: $maskedPassword"

allprojects {
  group = 'io.xj'

  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  tasks.withType(JavaCompile).tap {
    configureEach {
      options.encoding = 'UTF-8'
    }
  }
}

subprojects {
  apply plugin: 'java'
  configurations {
    implementation.exclude group: "commons-logging", module: "commons-logging"
    implementation.exclude group: 'com.google.code.findbugs', module: 'jsr305'
  }

  dependencies {
    implementation 'org.bytedeco:ffmpeg-platform-gpl:6.0-1.5.9' // Optional GPL builds with (almost) everything enabled
    implementation 'org.bytedeco:flandmark-platform:1.07-1.5.8' // Required by org.bytedeco.javacv
    implementation 'org.bytedeco:javacv-platform:1.5.9'
  }

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      name = 'ajoberstar-backup'
      url = 'https://ajoberstar.org/bintray-backup/'
    }
    maven {
      url = 'https://repo.maven.apache.org/maven2'
    }
    maven {
      url = 'https://packages.confluent.io/maven/'
    }
    maven {
      url = 'https://oss.sonatype.org/content/repositories/releases'
    }
    maven {
      name = "ReadPrivatePackages"
      url = uri("https://maven.pkg.github.com/xjmusic/hub")
      credentials {
        username = privatePackagesUsername
        password = privatePackagesPassword
      }
    }
    //org.pantelev mvn repo link
    maven {
      url = uri("https://plugins.gradle.org/m2/")
    }
  }
}

if (!project.hasProperty("jibFromImage")) {
  ext.jibFromImage = "localhost/base:latest"
}

if (!project.hasProperty("jibToImageRegistry")) {
  ext.jibToImageRegistry = "localhost"
}


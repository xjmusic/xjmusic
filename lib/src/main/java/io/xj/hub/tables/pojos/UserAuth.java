/*
 * This file is generated by jOOQ.
 */
package io.xj.hub.tables.pojos;


import io.xj.hub.enums.UserAuthType;
import io.xj.hub.tables.interfaces.IUserAuth;

import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAuth implements IUserAuth {

    private static final long serialVersionUID = 1L;

    private UUID         id;
    private UserAuthType type;
    private String       externalAccessToken;
    private String       externalRefreshToken;
    private String       externalAccount;
    private UUID         userId;

    public UserAuth() {}

    public UserAuth(IUserAuth value) {
        this.id = value.getId();
        this.type = value.getType();
        this.externalAccessToken = value.getExternalAccessToken();
        this.externalRefreshToken = value.getExternalRefreshToken();
        this.externalAccount = value.getExternalAccount();
        this.userId = value.getUserId();
    }

    public UserAuth(
        UUID         id,
        UserAuthType type,
        String       externalAccessToken,
        String       externalRefreshToken,
        String       externalAccount,
        UUID         userId
    ) {
        this.id = id;
        this.type = type;
        this.externalAccessToken = externalAccessToken;
        this.externalRefreshToken = externalRefreshToken;
        this.externalAccount = externalAccount;
        this.userId = userId;
    }

    /**
     * Getter for <code>xj.user_auth.id</code>.
     */
    @Override
    public UUID getId() {
        return this.id;
    }

    /**
     * Setter for <code>xj.user_auth.id</code>.
     */
    @Override
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Getter for <code>xj.user_auth.type</code>.
     */
    @Override
    public UserAuthType getType() {
        return this.type;
    }

    /**
     * Setter for <code>xj.user_auth.type</code>.
     */
    @Override
    public void setType(UserAuthType type) {
        this.type = type;
    }

    /**
     * Getter for <code>xj.user_auth.external_access_token</code>.
     */
    @Override
    public String getExternalAccessToken() {
        return this.externalAccessToken;
    }

    /**
     * Setter for <code>xj.user_auth.external_access_token</code>.
     */
    @Override
    public void setExternalAccessToken(String externalAccessToken) {
        this.externalAccessToken = externalAccessToken;
    }

    /**
     * Getter for <code>xj.user_auth.external_refresh_token</code>.
     */
    @Override
    public String getExternalRefreshToken() {
        return this.externalRefreshToken;
    }

    /**
     * Setter for <code>xj.user_auth.external_refresh_token</code>.
     */
    @Override
    public void setExternalRefreshToken(String externalRefreshToken) {
        this.externalRefreshToken = externalRefreshToken;
    }

    /**
     * Getter for <code>xj.user_auth.external_account</code>.
     */
    @Override
    public String getExternalAccount() {
        return this.externalAccount;
    }

    /**
     * Setter for <code>xj.user_auth.external_account</code>.
     */
    @Override
    public void setExternalAccount(String externalAccount) {
        this.externalAccount = externalAccount;
    }

    /**
     * Getter for <code>xj.user_auth.user_id</code>.
     */
    @Override
    public UUID getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>xj.user_auth.user_id</code>.
     */
    @Override
    public void setUserId(UUID userId) {
        this.userId = userId;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserAuth (");

        sb.append(id);
        sb.append(", ").append(type);
        sb.append(", ").append(externalAccessToken);
        sb.append(", ").append(externalRefreshToken);
        sb.append(", ").append(externalAccount);
        sb.append(", ").append(userId);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserAuth from) {
        setId(from.getId());
        setType(from.getType());
        setExternalAccessToken(from.getExternalAccessToken());
        setExternalRefreshToken(from.getExternalRefreshToken());
        setExternalAccount(from.getExternalAccount());
        setUserId(from.getUserId());
    }

    @Override
    public <E extends IUserAuth> E into(E into) {
        into.from(this);
        return into;
    }
}
